26:	SCRIPT_NAME = "slack_extension"
30:	SCRIPT_DESC = "Extends weechat for typing notification/search/etc on slack.com"
37:	SLACK_API_TRANSLATOR = {
80:	        if slack_debug is not None:	
128:	class SlackServer(object):	
153:	        self.connect_to_slack()
211:	            async_slack_api_request("slack.com", self.token, "rtm.start", {"ts":	 t})
214:	    def connected_to_slack(self, login_data):	
216:	            self.domain = login_data["team"]["domain"] + ".slack.com"
234:	                self.ping_hook = w.hook_timer(1000 * 5, 0, 0, "slack_ping_cb", self.domain)
236:	                    self.create_slack_mappings(login_data)
254:	            w.prnt("", "\n!! slack.com login error:	 " + login_data["error"] + "\n Please check your API token with\n \"/set plugins.var.python.slack_extension.slack_api_token (token)\"\n\n ")
273:	    def create_slack_websocket(self, data):	
277:	            self.ws_hook = w.hook_fd(self.ws.sock._sock.fileno(), 1, 0, 0, "slack_websocket_cb", self.identifier)
284:	    def create_slack_mappings(self, data):	
551:	        if "info" in SLACK_API_TRANSLATOR[self.type]:	
552:	            async_slack_api_request(self.server.domain, self.server.token, SLACK_API_TRANSLATOR[self.type]["info"], {"name":	 self.name.lstrip("#")})
554:	            if "join" in SLACK_API_TRANSLATOR[self.type]:	
555:	                async_slack_api_request(self.server.domain, self.server.token, SLACK_API_TRANSLATOR[self.type]["join"], {"name":	 self.name.lstrip("#")})
556:	                async_slack_api_request(self.server.domain, self.server.token, SLACK_API_TRANSLATOR[self.type]["join"], {"user":	 users.find(self.name).identifier})
566:	            async_slack_api_request(self.server.domain, self.server.token, SLACK_API_TRANSLATOR[self.type]["leave"], {"channel":	 self.identifier})
599:	        async_slack_api_request(self.server.domain, self.server.token, SLACK_API_TRANSLATOR[self.type]["mark"], {"channel":	 self.identifier, "ts":	 time})
705:	            #we do this because time resolution in weechat is less than slack
738:	            async_slack_api_request(self.server.domain, self.server.token, method, data)
743:	            async_slack_api_request(self.server.domain, self.server.token, 'chat.delete', {"channel":	 self.identifier, "ts":	 message['ts']})
746:	            async_slack_api_request(self.server.domain, self.server.token, 'chat.update', {"channel":	 self.identifier, "ts":	 message['ts'], "text":	 new_message.encode("utf-8")})
765:	                async_slack_api_request(self.server.domain, self.server.token, SLACK_API_TRANSLATOR[self.type]["history"], {"channel":	 self.identifier, "oldest":	 self.last_received, "count":	 BACKLOG_SIZE})
767:	                async_slack_api_request(self.server.domain, self.server.token, SLACK_API_TRANSLATOR[self.type]["history"], {"channel":	 self.identifier, "count":	 BACKLOG_SIZE})
885:	        async_slack_api_request(self.server.domain, self.server.token, "im.open", {"user":	 self.identifier})
966:	def slack_command_cb(data, current_buffer, args):	
1012:	# Wrap command_ functions that require they be performed in a slack buffer
1013:	def slack_buffer_required(f):	
1018:	            w.prnt(current_buffer, "This command must be used in a slack buffer")
1024:	@slack_buffer_required
1041:	@slack_buffer_required
1045:	    /slack upload [file_path]
1059:	        async_slack_api_upload_request(token, "files.upload", post_data)
1064:	    /slack talk [user]
1087:	    /slack join [channel]
1094:	            w.prnt(current_buffer, "You are connected to multiple Slack instances, please execute /join from a server buffer. i.e. (domain).slack.com")
1103:	@slack_buffer_required
1106:	    List all the channels for the slack instance (name, id, active)
1107:	    /slack channels
1143:	@slack_buffer_required
1146:	    List all the users for the slack instance (name, id, away)
1147:	    /slack users
1158:	    /slack setallreadmarkers
1164:	    w.config_set_plugin('slack_api_token', args)
1171:	@slack_buffer_required
1175:	    /slack away
1178:	    async_slack_api_request(server.domain, server.token, 'presence.set', {"presence":	 "away"})
1181:	@slack_buffer_required
1185:	    /slack back
1188:	    async_slack_api_request(server.domain, server.token, 'presence.set', {"presence":	 "active"})
1191:	@slack_buffer_required
1195:	    /slack markread
1230:	    create_slack_debug_buffer()
1243:	#    if not slack_buffer:	
1244:	#        create_slack_buffer()
1245:	#    w.buffer_set(slack_buffer, "display", "1")
1247:	#    w.prnt(slack_buffer,"\nSearched for:	 %s\n\n" % (query))
1248:	#    reply = slack_api_request('search.messages', {"query":	query}).read()
1253:	#        w.prnt(slack_buffer,str(formatted_message))
1307:	    /slack topic [<channel>] [<topic>|-delete]
1321:	                async_slack_api_request(server.domain, server.token, 'channels.setTopic', {"channel":	 channel.identifier, "topic":	 ""})
1323:	                async_slack_api_request(server.domain, server.token, 'channels.setTopic', {"channel":	 channel.identifier, "topic":	 topic})
1332:	def slack_websocket_cb(server, fd):	
1358:	    w.bar_item_update("slack_typing_notice")
1861:	    w.bar_item_update("slack_typing_notice")
1921:	def slack_ping_cb(data, remaining):	
1929:	def slack_connection_persistence_cb(data, remaining_calls):	
1935:	            server.buffer_prnt("Disconnected from slack, trying to reconnect..")
1938:	            server.connect_to_slack()
1942:	def slack_never_away_cb(data, remaining):	
1946:	            identifier = server.channels.find("slackbot").identifier
1948:	            #request = {"type":	"typing","channel":	"slackbot"}
2007:	# Slack specific requests
2010:	def async_slack_api_request(domain, token, request, post_data, priority=False):	
2011:	    if not STOP_TALKING_TO_SLACK:	
2015:	        params = { 'useragent':	 'wee_slack {}'.format(SCRIPT_VERSION) }
2019:	def async_slack_api_upload_request(token, request, post_data, priority=False):	
2020:	    if not STOP_TALKING_TO_SLACK:	
2021:	        url = 'https:	//slack.com/api/{}'.format(request)
2049:	                servers.find(data["token"]).connected_to_slack(my_json)
2096:	# END Slack specific requests
2124:	def closed_slack_buffer_cb(data, buffer):	
2125:	    global slack_buffer
2126:	    slack_buffer = None
2130:	def create_slack_buffer():	
2131:	    global slack_buffer
2132:	    slack_buffer = w.buffer_new("slack", "", "", "closed_slack_buffer_cb", "")
2133:	    w.buffer_set(slack_buffer, "notify", "0")
2134:	    #w.buffer_set(slack_buffer, "display", "1")
2138:	def closed_slack_debug_buffer_cb(data, buffer):	
2139:	    global slack_debug
2140:	    slack_debug = None
2144:	def create_slack_debug_buffer():	
2145:	    global slack_debug, debug_string
2146:	    if slack_debug is not None:	
2147:	        w.buffer_set(slack_debug, "display", "1")
2150:	        slack_debug = w.buffer_new("slack-debug", "", "", "closed_slack_debug_buffer_cb", "")
2151:	        w.buffer_set(slack_debug, "notify", "0")
2155:	    global slack_api_token, distracting_channels, colorize_nicks, colorize_private_chats, slack_debug, debug_mode, \
2158:	    slack_api_token = w.config_get_plugin("slack_api_token")
2160:	    if slack_api_token.startswith('${sec.data'):	
2161:	        slack_api_token = w.string_eval_expression(slack_api_token, {}, {}, {})
2168:	        create_slack_debug_buffer()
2178:	    stop_talking_to_slack()
2181:	    stop_talking_to_slack()
2184:	def stop_talking_to_slack():	
2190:	    global STOP_TALKING_TO_SLACK
2191:	    STOP_TALKING_TO_SLACK = True
2219:	            CACHE_NAME = "slack.cache"
2220:	            STOP_TALKING_TO_SLACK = False
2222:	            if not w.config_get_plugin('slack_api_token'):	
2223:	                w.config_set_plugin('slack_api_token', "INSERT VALID KEY HERE!")
2245:	            slack_debug = None
2254:	            slack_buffer = None
2268:	            for token in slack_api_token.split(','):	
2269:	                server = SlackServer(token)
2275:	            w.hook_timer(3000, 0, 0, "slack_connection_persistence_cb", "")
2281:	            w.hook_timer(1000 * 60 * 29, 0, 0, "slack_never_away_cb", "")
2291:	                'slack', 'Plugin to allow typing notification and sync of read markers for slack.com',
2297:	                '\nUse /slack help [command] to find out more\n',
2301:	                'slack_command_cb', '')
2311:	            w.hook_completion("nicks", "complete @-nicks for slack",
2313:	            w.bar_item_new('slack_typing_notice', 'typing_bar_item_cb', '')
